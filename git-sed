#!/usr/bin/env bash

function main() {
  local git_sed_cmd
  git_sed_cmd="$(basename "$0")"
  ! git rev-parse --is-inside-work-tree >/dev/null 2>&1 && echo 1>&2 'fatal: not a git repository (or any of the parent directories): .git' && return 1

  local sed_cmd='sed'
  if type >/dev/null 2>&1 gsed; then
    sed_cmd='gsed'
  else
    if [[ $(uname) == "Darwin" ]]; then
      echo 1>&2 ' brew install gnu-sed'
      return 1
    fi
  fi

  local dry_run=0
  local opts=(-i -E)
  for arg in "$@"; do
    if [[ "$arg" =~ "-n|--dry-run" ]]; then
      dry_run=1
      shift
      continue
    fi
    if [[ "$arg" =~ ^- ]]; then
      opts=("${opts[@]}" "$arg")
      shift
      continue
    else
      break
    fi
  done
  local pattern
  if [[ $git_sed_cmd == 'git-fixedsed' ]]; then
    [[ $# -lt 2 ]] && echo "$(basename "$0") <src> <dst> [PATH [PATH[...]]]" >&2 && return 1
    local src_text
    local dst_text
    src_text=$(printf '%s' "$1" | sed -E 's/([$+/|.*\()?]|\[|\]|\^)/\\&/g')
    dst_text=$(printf '%s' "$2" | sed -e 's/[\/&]/\\&/g')
    pattern="s/$src_text/$dst_text/g"
    shift
    shift
  else
    if [[ $# -lt 1 ]]; then
      cat <<EOF >&2
$(basename "$0") [sed options] <pattern> [PATH [PATH[...]]]

e.g.
# run dry-run mode (to check target files)
$(basename "$0") --dry-run 's/old/new/g' '*.md'
# remove start ~ end pattern block (even if multi lines)
$(basename "$0") -z 's/start-pattern.*end-pattern//g' '*.md'
EOF
      return 1
    fi
    pattern="$1"
    shift
  fi

  while IFS= read -r filepath || [[ -n "$filepath" ]]; do
    # NOTE: -L: symbolic link
    if [[ -f "$filepath" ]] && [[ ! -L "$filepath" ]]; then
      echo -n $'\e[38;5;179m'"$filepath: "$'\e[m'
      if [[ $dry_run == 0 ]]; then
        local pre_hash=$(md5sum "$filepath")
        "$sed_cmd" "${opts[@]}" "$pattern" "$filepath"
        local exit_code="$?"
        if [[ $exit_code != 0 ]]; then
          echo 1>&2 $'\e[38;5;202m'"Failed sed command with exit code: $?"$'\e[m'
          exit $exit_code
        fi
        local post_hash=$(md5sum "$filepath")
        if [[ "$pre_hash" == "$post_hash" ]]; then
          # same file(not changed)
          echo -n "ðŸ”’"
        else
          # changed
          echo -n "ðŸ‘»"
        fi
        echo
      fi
    fi
  done < <(git ls-files -- "$@")
  printf '%*s\n' "$(tput cols)" '' | tr ' ' "="
  echo $'\e[38;5;57m''git diff --stat'$'\e[m'
  printf '%*s\n' "$(tput cols)" '' | tr ' ' "="
  git --no-pager diff --stat --color=always
}
main "$@"
